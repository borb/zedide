<!DOCTYPE html>
<html lang="en">
	<head>
		<title>web-z80-ide prototype</title>
		<link rel="stylesheet" href="/css/zedide.css" type="text/css" media="all" />
	</head>
	<body ng-controller="ideController">
		<div class="editor">
			<textarea id="code-editor">
	.org $0000
	ld a, $00

loop:
	; copy a into $f000, not $ffff as originally because that is the SP
	ld ($f000), a
	ld bc, $aabb
	ld de, $ccdd
	ld hl, $eeff

	; play around with swapping between register banks
	;exx
	;ex af, af'

	inc a

	; cheat at resetting cpu flags
	ld hl, $00
	push hl
	pop af

	; play with accumulator as a way of triggering z/c flags
	ld a, $ff
	add a, $00
	;halt ; product here should be z unset c unset

	; play with accumulator as a way of triggering z/c flags
	ld a, $ff
	add a, $01
	;halt ; product here should be z set c set

	; play with accumulator as a way of triggering z/c flags
	ld a, $ff
	add a, $02
	;halt ; product here should be z unset c set

	; trigger zero flag to be set by loading ixh with 1 and deccing it
	ld ixh, $01
	dec ixh

	; ix/iy load bit ops test
	; no official syntax! erk!
	ld iy, $0000
	.db $fd, $cb, $00, $10 ; rl (iy+00) store in b
	halt

	; this will only run if dec a results in z being set
	jp z, loop
</textarea>
		</div>
		<div class="toolkit">
			<h2>Control panel</h2>
			<p>
				<button id="assemble" ng-click="assemble()">Assemble</button>
				<button id="save" ng-click="save()">Save</button>
			</p>
			<h2>Program control</h2>
			<p>
				<button id="step" ng-click="step()">Step</button>
				<button id="run" ng-click="run()">Run</button>
				<button id="stop" ng-click="stop()">Stop</button>
			</p>
			<table>
				<tr>
					<th>pc</th>
					<th>sp</th>
					<th>im</th>
					<th>interrupts</th>
				</tr>
				<tr>
					<td>{{ regs.pc }}</td>
					<td>{{ regs.sp }}</td>
					<td>{{ regs.im }}</td>
					<td>{{ regs.interrupts }}</td>
				</tr>
				<tr>
					<th>a</th>
					<th>bc</th>
					<th>de</th>
					<th>hl</th>
				</tr>
				<tr>
					<td>{{ regs.a }}</td>
					<td>{{ regs.bc }}</td>
					<td>{{ regs.de }}</td>
					<td>{{ regs.hl }}</td>
				</tr>
				<tr>
					<th>a'</th>
					<th>bc'</th>
					<th>de'</th>
					<th>hl'</th>
				</tr>
				<tr>
					<td>{{ regs.a2 }}</td>
					<td>{{ regs.bc2 }}</td>
					<td>{{ regs.de2 }}</td>
					<td>{{ regs.hl2 }}</td>
				</tr>
				<tr>
					<th>ix</th>
					<th>iy</th>
					<th>i</th>
					<th>r</th>
				</tr>
				<tr>
					<td>{{ regs.ix }}</td>
					<td>{{ regs.iy }}</td>
					<td>{{ regs.i }}</td>
					<td>{{ regs.r }}</td>
				</tr>
			</table>
			<table>
				<tr>
					<td>cpu flags</td>
				</tr>
				<tr><td><pre>sz5h3pnc</pre></td></tr>
				<tr><td><pre>{{ regs.flags }}</pre></td></tr>
			</table>
		</div>
		<pre class="cpu-output" ng-bind="cpuOutput"></pre>
		<div class="output-messages" ng-bind-html="outputMessages | nl2br"></div>
		<script src="/js/frontend.bundle.js"></script>
	</body>
</html>
